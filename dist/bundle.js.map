{"version":3,"sources":["webpack://javascript-baseball-precourse/./src/index.js","webpack://javascript-baseball-precourse/./src/modules/BaseballGame/index.js","webpack://javascript-baseball-precourse/./src/modules/index.js","webpack://javascript-baseball-precourse/./node_modules/eventsource-polyfill/dist/browserify-eventsource.js","webpack://javascript-baseball-precourse/./node_modules/eventsource-polyfill/dist/eventsource.js","webpack://javascript-baseball-precourse/webpack/bootstrap","webpack://javascript-baseball-precourse/webpack/runtime/define property getters","webpack://javascript-baseball-precourse/webpack/runtime/hasOwnProperty shorthand","webpack://javascript-baseball-precourse/webpack/runtime/make namespace object","webpack://javascript-baseball-precourse/webpack/startup"],"names":["game","BaseballGame","numIsSubmited","e","cleanResult","userInputNumbers","document","getElementById","value","responseString","play","computerInputNumbers","renderResult","error","alert","submitNumButton","addEventListener","getRandom","minVal","maxVal","random","table","length","fill","cnt","console","log","num","Math","floor","strike","ball","i","indexOf","judge","result_div","hasChildNodes","removeChild","firstChild","string","response_p","createElement","innerHTML","appendChild","replay_div","id","replay_p","replay_button","restart","bind"],"mappings":"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C;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6CAA6C,iCAAiC;AAC9E;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,oDAAoD,WAAW;AAC/D,SAAS;;;AAGT;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAsD,iBAAiB,EAAE;AAC5G;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,qBAAqB,yBAAyB;;AAE9C;AACA;AACA;;AAEA,yBAAyB,kBAAkB;;AAE3C;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD;;AAEvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,+BAA+B,qBAAqB;AACpD;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA,aAAa;;AAEb;;AAEA;AACA,aAAa;;AAEb;;AAEA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,aAAa;;AAEb;;AAEA;AACA,aAAa;;AAEb;;AAEA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;UC5mBD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA;UACA","file":"bundle.js","sourcesContent":["import { BaseballGame } from \"./modules\"\r\n\r\nconst game = new BaseballGame();\r\n\r\nfunction numIsSubmited(e) {\r\n  try {\r\n    game.cleanResult()\r\n    const userInputNumbers = document.getElementById(\"user-input\").value\r\n    const responseString = game.play(game.computerInputNumbers, userInputNumbers)\r\n    game.renderResult(responseString)\r\n  } catch (error) {\r\n    alert(error)\r\n  }\r\n\r\n}\r\nconst submitNumButton = document.getElementById(\"submit\")\r\nsubmitNumButton.addEventListener(\"click\", numIsSubmited)\r\n","export default class BaseballGame {\r\n  constructor() {\r\n    this.computerInputNumbers = this.getRandom()\r\n  }\r\n\r\n  getRandom() {\r\n    try {\r\n      const minVal = 1\r\n      const maxVal = 9\r\n      let random = ''\r\n      let table;\r\n      (table = []).length = 10\r\n      table.fill(false)\r\n\r\n      let cnt = 0\r\n      while (cnt < 3) {\r\n        console.log(cnt)\r\n        let num = Math.floor((Math.random() * (maxVal - minVal + 1)) + minVal)\r\n        if (table[num]) {\r\n          continue\r\n        } else {\r\n          table[num] = true\r\n          random += num\r\n          cnt++\r\n        }\r\n      }\r\n      console.log(random)\r\n      return random\r\n\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n\r\n  judge(computerInputNumbers, userInputNumbers) {\r\n    try {\r\n      let strike = 0\r\n      let ball = 0\r\n      for (let i = 0; i < 3; i++) {\r\n        if (computerInputNumbers[i] === userInputNumbers[i]) {\r\n          strike++\r\n        } else if (computerInputNumbers.indexOf(userInputNumbers[i]) !== -1) {\r\n          ball++\r\n        }\r\n      }\r\n\r\n      return [strike, ball]\r\n\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  play(computerInputNumbers, userInputNumbers) {\r\n    try {\r\n      const [strike, ball] = this.judge(computerInputNumbers, userInputNumbers)\r\n      let responseString = ''\r\n\r\n      if (ball) {\r\n        responseString += `${ball}볼`\r\n      }\r\n\r\n      if (strike) {\r\n        responseString += ` ${strike}스트라이크`\r\n      }\r\n\r\n      if (ball === 0 && strike === 0) {\r\n        responseString = '낫싱'\r\n      }\r\n\r\n      if (strike === 3) {\r\n        responseString = '🎉정답을 맞추셨습니다!🎉'\r\n      }\r\n\r\n      return responseString;\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  cleanResult() {\r\n    try {\r\n      const result_div = document.getElementById('result')\r\n\r\n      while (result_div.hasChildNodes()) {\r\n        result_div.removeChild(result_div.firstChild)\r\n      }\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n\r\n  restart() {\r\n    try {\r\n      this.cleanResult()\r\n      this.computerInputNumbers = this.getRandom()\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n\r\n  renderResult(string) {\r\n    try {\r\n      const result_div = document.getElementById('result')\r\n      const response_p = document.createElement('p')\r\n      response_p.innerHTML = string\r\n      result_div.appendChild(response_p)\r\n\r\n      if (string === '🎉정답을 맞추셨습니다!🎉') {\r\n        const replay_div = document.createElement('div')\r\n        replay_div.id = 'replay'\r\n\r\n        let replay_p = document.createElement('p')\r\n        replay_p.innerHTML = '게임을 새로 시작하시겠습니까?'\r\n        replay_div.appendChild(replay_p)\r\n\r\n        const replay_button = document.createElement('button')\r\n        replay_button.innerHTML = '게임 재시작'\r\n        replay_button.id = 'replay-button'\r\n        replay_button.addEventListener('click', this.restart.bind(this))\r\n        replay_div.appendChild(replay_button)\r\n\r\n        result_div.appendChild(replay_div)\r\n      }\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n  }\r\n}","import BaseballGame from \"./BaseballGame\"\r\n\r\n\r\nexport { BaseballGame } ","/*\n   * CommonJS module that exports EventSource polyfill version 0.9.6\n   * This module is intended for browser side use\n   * =====================================================================\n   * THIS IS A POLYFILL MODULE, SO IT HAS SIDE EFFECTS\n   * IT AUTOMATICALLY CHECKS IF window OBJECT DEFINES EventSource\n   * AND ADD THE EXPORTED ONE IN CASE IT IS UNDEFINED\n   * =====================================================================\n   * Supported by sc AmvTek srl\n   * :email: devel@amvtek.com\n */\n\n\nvar PolyfillEventSource = require('./eventsource.js').EventSource;\nmodule.exports = PolyfillEventSource;\n\n// Add EventSource to window if it is missing...\nif (window && !window.EventSource){\n    window.EventSource = PolyfillEventSource;\n    if (console){\n\tconsole.log(\"polyfill-eventsource added missing EventSource to window\");\n    }\n}\n","/*\n   * EventSource polyfill version 0.9.6\n   * Supported by sc AmvTek srl\n   * :email: devel@amvtek.com\n */\n;(function (global) {\n\n    if (global.EventSource && !global._eventSourceImportPrefix){\n        return;\n    }\n\n    var evsImportName = (global._eventSourceImportPrefix||'')+\"EventSource\";\n\n    var EventSource = function (url, options) {\n\n        if (!url || typeof url != 'string') {\n            throw new SyntaxError('Not enough arguments');\n        }\n\n        this.URL = url;\n        this.setOptions(options);\n        var evs = this;\n        setTimeout(function(){evs.poll()}, 0);\n    };\n\n    EventSource.prototype = {\n\n        CONNECTING: 0,\n\n        OPEN: 1,\n\n        CLOSED: 2,\n\n        defaultOptions: {\n\n            loggingEnabled: false,\n\n            loggingPrefix: \"eventsource\",\n\n            interval: 500, // milliseconds\n\n            bufferSizeLimit: 256*1024, // bytes\n\n            silentTimeout: 300000, // milliseconds\n\n            getArgs:{\n                'evs_buffer_size_limit': 256*1024\n            },\n\n            xhrHeaders:{\n                'Accept': 'text/event-stream',\n                'Cache-Control': 'no-cache',\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        },\n\n        setOptions: function(options){\n\n            var defaults = this.defaultOptions;\n            var option;\n\n            // set all default options...\n            for (option in defaults){\n\n                if ( defaults.hasOwnProperty(option) ){\n                    this[option] = defaults[option];\n                }\n            }\n\n            // override with what is in options\n            for (option in options){\n\n                if (option in defaults && options.hasOwnProperty(option)){\n                    this[option] = options[option];\n                }\n            }\n\n            // if getArgs option is enabled\n            // ensure evs_buffer_size_limit corresponds to bufferSizeLimit\n            if (this.getArgs && this.bufferSizeLimit) {\n\n                this.getArgs['evs_buffer_size_limit'] = this.bufferSizeLimit;\n            }\n\n            // if console is not available, force loggingEnabled to false\n            if (typeof console === \"undefined\" || typeof console.log === \"undefined\") {\n\n                this.loggingEnabled = false;\n            }\n        },\n\n        log: function(message) {\n\n            if (this.loggingEnabled) {\n\n                console.log(\"[\" + this.loggingPrefix +\"]:\" + message)\n            }\n        },\n\n        poll: function() {\n\n            try {\n\n                if (this.readyState == this.CLOSED) {\n                    return;\n                }\n\n                this.cleanup();\n                this.readyState = this.CONNECTING;\n                this.cursor = 0;\n                this.cache = '';\n                this._xhr = new this.XHR(this);\n                this.resetNoActivityTimer();\n\n            }\n            catch (e) {\n\n                // in an attempt to silence the errors\n                this.log('There were errors inside the pool try-catch');\n                this.dispatchEvent('error', { type: 'error', data: e.message });\n            }\n        },\n\n        pollAgain: function (interval) {\n\n            // schedule poll to be called after interval milliseconds\n            var evs = this;\n            evs.readyState = evs.CONNECTING;\n            evs.dispatchEvent('error', {\n                type: 'error',\n                data: \"Reconnecting \"\n            });\n            this._pollTimer = setTimeout(function(){evs.poll()}, interval||0);\n        },\n\n\n        cleanup: function() {\n\n            this.log('evs cleaning up')\n\n            if (this._pollTimer){\n                clearInterval(this._pollTimer);\n                this._pollTimer = null;\n            }\n\n            if (this._noActivityTimer){\n                clearInterval(this._noActivityTimer);\n                this._noActivityTimer = null;\n            }\n\n            if (this._xhr){\n                this._xhr.abort();\n                this._xhr = null;\n            }\n        },\n\n        resetNoActivityTimer: function(){\n\n            if (this.silentTimeout){\n\n                if (this._noActivityTimer){\n                    clearInterval(this._noActivityTimer);\n                }\n                var evs = this;\n                this._noActivityTimer = setTimeout(\n                        function(){ evs.log('Timeout! silentTImeout:'+evs.silentTimeout); evs.pollAgain(); },\n                        this.silentTimeout\n                        );\n            }\n        },\n\n        close: function () {\n\n            this.readyState = this.CLOSED;\n            this.log('Closing connection. readyState: '+this.readyState);\n            this.cleanup();\n        },\n\n        ondata: function() {\n\n            var request = this._xhr;\n\n            if (request.isReady() && !request.hasError() ) {\n                // reset the timer, as we have activity\n                this.resetNoActivityTimer();\n\n                // move this EventSource to OPEN state...\n                if (this.readyState == this.CONNECTING) {\n                    this.readyState = this.OPEN;\n                    this.dispatchEvent('open', { type: 'open' });\n                }\n\n                var buffer = request.getBuffer();\n\n                if (buffer.length > this.bufferSizeLimit) {\n                    this.log('buffer.length > this.bufferSizeLimit');\n                    this.pollAgain();\n                }\n\n                if (this.cursor == 0 && buffer.length > 0){\n\n                    // skip byte order mark \\uFEFF character if it starts the stream\n                    if (buffer.substring(0,1) == '\\uFEFF'){\n                        this.cursor = 1;\n                    }\n                }\n\n                var lastMessageIndex = this.lastMessageIndex(buffer);\n                if (lastMessageIndex[0] >= this.cursor){\n\n                    var newcursor = lastMessageIndex[1];\n                    var toparse = buffer.substring(this.cursor, newcursor);\n                    this.parseStream(toparse);\n                    this.cursor = newcursor;\n                }\n\n                // if request is finished, reopen the connection\n                if (request.isDone()) {\n                    this.log('request.isDone(). reopening the connection');\n                    this.pollAgain(this.interval);\n                }\n            }\n            else if (this.readyState !== this.CLOSED) {\n\n                this.log('this.readyState !== this.CLOSED');\n                this.pollAgain(this.interval);\n\n                //MV: Unsure why an error was previously dispatched\n            }\n        },\n\n        parseStream: function(chunk) {\n\n            // normalize line separators (\\r\\n,\\r,\\n) to \\n\n            // remove white spaces that may precede \\n\n            chunk = this.cache + this.normalizeToLF(chunk);\n\n            var events = chunk.split('\\n\\n');\n\n            var i, j, eventType, datas, line, retry;\n\n            for (i=0; i < (events.length - 1); i++) {\n\n                eventType = 'message';\n                datas = [];\n                parts = events[i].split('\\n');\n\n                for (j=0; j < parts.length; j++) {\n\n                    line = this.trimWhiteSpace(parts[j]);\n\n                    if (line.indexOf('event') == 0) {\n\n                        eventType = line.replace(/event:?\\s*/, '');\n                    }\n                    else if (line.indexOf('retry') == 0) {\n\n                        retry = parseInt(line.replace(/retry:?\\s*/, ''));\n                        if(!isNaN(retry)) {\n                            this.interval = retry;\n                        }\n                    }\n                    else if (line.indexOf('data') == 0) {\n\n                        datas.push(line.replace(/data:?\\s*/, ''));\n                    }\n                    else if (line.indexOf('id:') == 0) {\n\n                        this.lastEventId = line.replace(/id:?\\s*/, '');\n                    }\n                    else if (line.indexOf('id') == 0) { // this resets the id\n\n                        this.lastEventId = null;\n                    }\n                }\n\n                if (datas.length) {\n                    // dispatch a new event\n                    var event = new MessageEvent(eventType, datas.join('\\n'), window.location.origin, this.lastEventId);\n                    this.dispatchEvent(eventType, event);\n                }\n            }\n\n            this.cache = events[events.length - 1];\n        },\n\n        dispatchEvent: function (type, event) {\n            var handlers = this['_' + type + 'Handlers'];\n\n            if (handlers) {\n\n                for (var i = 0; i < handlers.length; i++) {\n                    handlers[i].call(this, event);\n                }\n            }\n\n            if (this['on' + type]) {\n                this['on' + type].call(this, event);\n            }\n\n        },\n\n        addEventListener: function (type, handler) {\n            if (!this['_' + type + 'Handlers']) {\n                this['_' + type + 'Handlers'] = [];\n            }\n\n            this['_' + type + 'Handlers'].push(handler);\n        },\n\n        removeEventListener: function (type, handler) {\n            var handlers = this['_' + type + 'Handlers'];\n            if (!handlers) {\n                return;\n            }\n            for (var i = handlers.length - 1; i >= 0; --i) {\n                if (handlers[i] === handler) {\n                    handlers.splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        _pollTimer: null,\n\n        _noactivityTimer: null,\n\n        _xhr: null,\n\n        lastEventId: null,\n\n        cache: '',\n\n        cursor: 0,\n\n        onerror: null,\n\n        onmessage: null,\n\n        onopen: null,\n\n        readyState: 0,\n\n        // ===================================================================\n        // helpers functions\n        // those are attached to prototype to ease reuse and testing...\n\n        urlWithParams: function (baseURL, params) {\n\n            var encodedArgs = [];\n\n            if (params){\n\n                var key, urlarg;\n                var urlize = encodeURIComponent;\n\n                for (key in params){\n                    if (params.hasOwnProperty(key)) {\n                        urlarg = urlize(key)+'='+urlize(params[key]);\n                        encodedArgs.push(urlarg);\n                    }\n                }\n            }\n\n            if (encodedArgs.length > 0){\n\n                if (baseURL.indexOf('?') == -1)\n                    return baseURL + '?' + encodedArgs.join('&');\n                return baseURL + '&' + encodedArgs.join('&');\n            }\n            return baseURL;\n        },\n\n        lastMessageIndex: function(text) {\n\n            var ln2 =text.lastIndexOf('\\n\\n');\n            var lr2 = text.lastIndexOf('\\r\\r');\n            var lrln2 = text.lastIndexOf('\\r\\n\\r\\n');\n\n            if (lrln2 > Math.max(ln2, lr2)) {\n                return [lrln2, lrln2+4];\n            }\n            return [Math.max(ln2, lr2), Math.max(ln2, lr2) + 2]\n        },\n\n        trimWhiteSpace: function(str) {\n            // to remove whitespaces left and right of string\n\n            var reTrim = /^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g;\n            return str.replace(reTrim, '');\n        },\n\n        normalizeToLF: function(str) {\n\n            // replace \\r and \\r\\n with \\n\n            return str.replace(/\\r\\n|\\r/g, '\\n');\n        }\n\n    };\n\n    if (!isOldIE()){\n\n        EventSource.isPolyfill = \"XHR\";\n\n        // EventSource will send request using XMLHttpRequest\n        EventSource.prototype.XHR = function(evs) {\n\n            request = new XMLHttpRequest();\n            this._request = request;\n            evs._xhr = this;\n\n            // set handlers\n            request.onreadystatechange = function(){\n                if (request.readyState > 1 && evs.readyState != evs.CLOSED) {\n                    if (request.status == 200 || (request.status>=300 && request.status<400)){\n                        evs.ondata();\n                    }\n                    else {\n                        request._failed = true;\n                        evs.readyState = evs.CLOSED;\n                        evs.dispatchEvent('error', {\n                            type: 'error',\n                            data: \"The server responded with \"+request.status\n                        });\n                        evs.close();\n                    }\n                }\n            };\n\n            request.onprogress = function () {\n            };\n\n            request.open('GET', evs.urlWithParams(evs.URL, evs.getArgs), true);\n\n            var headers = evs.xhrHeaders; // maybe null\n            for (var header in headers) {\n                if (headers.hasOwnProperty(header)){\n                    request.setRequestHeader(header, headers[header]);\n                }\n            }\n            if (evs.lastEventId) {\n                request.setRequestHeader('Last-Event-Id', evs.lastEventId);\n            }\n\n            request.send();\n        };\n\n        EventSource.prototype.XHR.prototype = {\n\n            useXDomainRequest: false,\n\n            _request: null,\n\n            _failed: false, // true if we have had errors...\n\n            isReady: function() {\n\n\n                return this._request.readyState >= 2;\n            },\n\n            isDone: function() {\n\n                return (this._request.readyState == 4);\n            },\n\n            hasError: function() {\n\n                return (this._failed || (this._request.status >= 400));\n            },\n\n            getBuffer: function() {\n\n                var rv = '';\n                try {\n                    rv = this._request.responseText || '';\n                }\n                catch (e){}\n                return rv;\n            },\n\n            abort: function() {\n\n                if ( this._request ) {\n                    this._request.abort();\n                }\n            }\n        };\n    }\n    else {\n\n\tEventSource.isPolyfill = \"IE_8-9\";\n\n        // patch EventSource defaultOptions\n        var defaults = EventSource.prototype.defaultOptions;\n        defaults.xhrHeaders = null; // no headers will be sent\n        defaults.getArgs['evs_preamble'] = 2048 + 8;\n\n        // EventSource will send request using Internet Explorer XDomainRequest\n        EventSource.prototype.XHR = function(evs) {\n\n            request = new XDomainRequest();\n            this._request = request;\n\n            // set handlers\n            request.onprogress = function(){\n                request._ready = true;\n                evs.ondata();\n            };\n\n            request.onload = function(){\n                this._loaded = true;\n                evs.ondata();\n            };\n\n            request.onerror = function(){\n                this._failed = true;\n                evs.readyState = evs.CLOSED;\n                evs.dispatchEvent('error', {\n                    type: 'error',\n                    data: \"XDomainRequest error\"\n                });\n            };\n\n            request.ontimeout = function(){\n                this._failed = true;\n                evs.readyState = evs.CLOSED;\n                evs.dispatchEvent('error', {\n                    type: 'error',\n                    data: \"XDomainRequest timed out\"\n                });\n            };\n\n            // XDomainRequest does not allow setting custom headers\n            // If EventSource has enabled the use of GET arguments\n            // we add parameters to URL so that server can adapt the stream...\n            var reqGetArgs = {};\n            if (evs.getArgs) {\n\n                // copy evs.getArgs in reqGetArgs\n                var defaultArgs = evs.getArgs;\n                    for (var key in defaultArgs) {\n                        if (defaultArgs.hasOwnProperty(key)){\n                            reqGetArgs[key] = defaultArgs[key];\n                        }\n                    }\n                if (evs.lastEventId){\n                    reqGetArgs['evs_last_event_id'] = evs.lastEventId;\n                }\n            }\n            // send the request\n\n            request.open('GET', evs.urlWithParams(evs.URL,reqGetArgs));\n            request.send();\n        };\n\n        EventSource.prototype.XHR.prototype = {\n\n            useXDomainRequest: true,\n\n            _request: null,\n\n            _ready: false, // true when progress events are dispatched\n\n            _loaded: false, // true when request has been loaded\n\n            _failed: false, // true if when request is in error\n\n            isReady: function() {\n\n                return this._request._ready;\n            },\n\n            isDone: function() {\n\n                return this._request._loaded;\n            },\n\n            hasError: function() {\n\n                return this._request._failed;\n            },\n\n            getBuffer: function() {\n\n                var rv = '';\n                try {\n                    rv = this._request.responseText || '';\n                }\n                catch (e){}\n                return rv;\n            },\n\n            abort: function() {\n\n                if ( this._request){\n                    this._request.abort();\n                }\n            }\n        };\n    }\n\n    function MessageEvent(type, data, origin, lastEventId) {\n\n        this.bubbles = false;\n        this.cancelBubble = false;\n        this.cancelable = false;\n        this.data = data || null;\n        this.origin = origin || '';\n        this.lastEventId = lastEventId || '';\n        this.type = type || 'message';\n    }\n\n    function isOldIE () {\n\n        //return true if we are in IE8 or IE9\n        return (window.XDomainRequest && (window.XMLHttpRequest && new XMLHttpRequest().responseType === undefined)) ? true : false;\n    }\n\n    global[evsImportName] = EventSource;\n})(this);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./node_modules/eventsource-polyfill/dist/browserify-eventsource.js\");\n__webpack_require__(\"./src/index.js\");\n"],"sourceRoot":""}